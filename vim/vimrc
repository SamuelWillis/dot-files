"--- Visuals ---
" Syntax highlighting
syntax enable

" Colour scheme
colorscheme solarized
set background=light

" Display cursor position at bottom right.
set ruler

" Highlight searches. (<leader>, to temp turn off highlighting)
set hlsearch
set incsearch

" Line numbers
set number

" Highlight line cursor is on.
set cursorline

" Set tags file
set tags=./tags,tags;$HOME
set textwidth=80

"--- Mappings ---
let mapleader=" "

" Edit .vimrc in new file
nmap <leader>ev :tabedit $MYVIMRC<cr>
" Edit snippet files
nmap <leader>es :tabedit ~/.vim/snippets/

" Map Y to act like D and C. yank until EOL
map Y y$

" Map <leader>, to also turn off seach highlighting
noremap <leader>, :nohl<CR><C-L>

" Remove Trailing Whitespace in a file
nnoremap <leader>rtw :%s/\s\+$//e<CR>:w<CR>

" Search the ctags file for a tag
nmap <leader>tf :tag<space>

" Insert a line below without going into insert.
nmap <leader>o o<ESC>k

" Insert a line above without going into insert.
nmap <leader>O O<ESC>j

"--- Split Management ---
" Splits default to below and to right.
set splitbelow
set splitright

" Remap split traversal
nmap <C-K> <C-W><C-K>
nmap <C-J> <C-W><C-J>
nmap <C-H> <C-W><C-H>
nmap <C-L> <C-W><C-L>

" Makes current pane take up whole screen
nmap <leader>fs <C-W><bar>

" Makes panes equal widths.
nmap <leader>sp <C-W>=

"--- Options ---
" Attempt to determine type of file based on name and possibly contents.
filetype on
filetype plugin on
filetype plugin indent on

set nocompatible

" 'hidden' allows for easy switching between multiple files in same window.
" Allows for re-use of same window for switching between unsaved buffer w/o saving first.
" and maintains an undo history for multiple files when re-using window.
set hidden

" This apparently gives better wildmenu completion
set wildmenu

" Show partial commands in last line of screen
set showcmd

" Case insensitive search, except when using caps
set ignorecase
set smartcase

" Backspacing over auto indent, line breaks and start of insert action.
set backspace=indent,eol,start

" Keep same indent as the line you are currently on
set autoindent

" Always display status line
set laststatus=2

" Raise dialog instead of failing command because of unsaved changes
set confirm

" Instead of noise
set visualbell

" Reset terminal code for visual bell
set t_vb=

" Enable mouse
set mouse=a

" Indentation options
set shiftwidth=2
set softtabstop=2
set expandtab


" Show tabs?
set list
set listchars=tab:\|\ ,trail:.,extends:#,nbsp:.

"--- Auto Commands ---
augroup autosourcing
    autocmd!
    autocmd BufWritePost .vimrc source %
augroup END

" want 2 spaces for blade.php and 4 for .php
augroup indentation
    autocmd!
    autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2 expandtab
    autocmd FileType json setlocal shiftwidth=2 softtabstop=2 expandtab
    autocmd FileType scss setlocal shiftwidth=2 softtabstop=2 expandtab
    autocmd FileType php setlocal shiftwidth=4 softtabstop=4 expandtab
    autocmd FileType blade setlocal shiftwidth=4 softtabstop=4 expandtab
    autocmd FileType snippets setlocal shiftwidth=4 softtabstop=4
augroup END

"--- Plugins ---

"/
"/ CtrlP
"/
let g:ctrlp_extensions = ['tag']
if exists("g:ctrlp_user_command")
  unlet g:ctrlp_user_command
endif
let g:ctrlp_user_command = [
    \ '.git', 'cd %s && git ls-files . -co --exclude-standard',
    \ 'find %s -type f'
    \ ]
" Move the CtrlP window.
" Place at the top, order top to bottom, at least 1, maximum 30, always
" display 30 columns
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:30,results:15'
let g:ctrlp_buftag_types = {
    \ 'erlang'     : '--language-force=erlang --erlang-types=drmf',
    \ 'elixir'     : '--language-force=elixir --elixir-types=drmf',
    \ }

" Open CtrlP in BufTag mode.
" Allows for searching buffer for tags.
nmap <leader>cpt :CtrlPBufTag<CR>

" Open CtrlP Most Recently used.
nmap <leader>cpr :CtrlPMRUFiles<cr>

"/
"/ NERDTree
"/
" Open NERDTree
nmap <leader>k :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>
let NERDTreeHijackNetrw = 0
let NERDTreeQuitOnOpen=1
let NERDTreeShowBookmarks=1
let g:NERDTreeWinSize=40

"/
"/ Vim-Lightline
"/
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ }

"/
"/ ALE
"/
let g:ale_enabled=1
let g:ale_fix_on_save=1
let g:ale_lint_on_save=1
let g:ale_completion_enabled=1
let g:ale_set_loclist=1
let g:ale_set_signs=1

let g:ale_linters = {
\   'css': ['eslint'],
\   'elixir': ['elixir-ls', 'credo'],
\   'javascript': ['eslint'],
\   'php': ['phpcs'],
\   'python': ['pylint'],
\   'yml': ['yamllint'],
\   'vue': ['eslint'],
\}

let g:ale_fixers = {
\   'elpylintixir': ['mix_format'],
\   'python': ['autopep8'],
\   'ruby': ['standardrb'],
\}

" Required, tell ALE where to find Elixir LS
let g:ale_elixir_elixir_ls_release = expand("~/GitHub/elixir-ls/rel")

nnoremap <leader>adt :ALEGoToDefinition<cr>
nnoremap <leader>adh :ALEHover<cr>
nnoremap <leader>add :ALEDetail<cr>
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>
nmap <silent> <leader>af :ALEFix<cr>

"/
"/ Vim-Test
"/
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>

let test#php#phpunit#options=''
let test#php#phpunit#executable="make phpunit"

"/
"/ Vim-debug
"/
let g:vdebug_options = {}
let g:vdebug_options['server'] = 'localhost'
let g:vdebug_options['port'] = 9003
let g:vdebug_options['timeout'] = 20
let g:vdebug_options['path_maps'] = {
    \ '/var/www' : getcwd(),
\ }

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
